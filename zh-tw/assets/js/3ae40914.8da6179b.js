"use strict";(self.webpackChunkdocs_contracts=self.webpackChunkdocs_contracts||[]).push([[410],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>p});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),d=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),f=r,p=u["".concat(i,".").concat(f)]||u[f]||m[f]||o;return n?a.createElement(p,s(s({ref:t},c),{},{components:n})):a.createElement(p,s({ref:t},c))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=f;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[u]="string"==typeof e?e:r,s[1]=l;for(var d=2;d<o;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},6001:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:2},s="Jetton Wallet",l={unversionedId:"jetton/JettonWallet",id:"jetton/JettonWallet",title:"Jetton Wallet",description:"This Jetton Wallet smart contract provides a framework for Jetton MastWalleter that comply with the TEP-0074 standard.",source:"@site/i18n/zh-tw/docusaurus-plugin-content-docs/current/jetton/JettonWallet.md",sourceDirName:"jetton",slug:"/jetton/JettonWallet",permalink:"/docs.contracts/zh-tw/docs/jetton/JettonWallet",draft:!1,editUrl:"https://github.com/Ton-Dynasty/tondynasty-contracts/pulls/docs/jetton/JettonWallet.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Jetton Master",permalink:"/docs.contracts/zh-tw/docs/jetton/JettonMaster"},next:{title:"Tutorial - NFT",permalink:"/docs.contracts/zh-tw/docs/category/tutorial---nft"}},i={},d=[{value:"Overview",id:"overview",level:2},{value:"Our Trait",id:"our-trait",level:2},{value:"Message Types",id:"message-types",level:3},{value:"<code>JettonTransfer</code>:",id:"jettontransfer",level:4},{value:"<code>JettonTransferNotification</code>:",id:"jettontransfernotification",level:4},{value:"<code>JettonBurn</code>:",id:"jettonburn",level:4},{value:"<code>JettonExcesses</code>:",id:"jettonexcesses",level:4},{value:"<code>JettonInternalTransfer</code>:",id:"jettoninternaltransfer",level:4},{value:"<code>JettonBurnNotification</code>:",id:"jettonburnnotification",level:4},{value:"Must Override Functions",id:"must-override-functions",level:3},{value:"<code>calculate_jetton_wallet_init(owner_address: Address)</code>:",id:"calculate_jetton_wallet_initowner_address-address",level:4},{value:"Optional Override Functions",id:"optional-override-functions",level:3},{value:"<code>_internal_transfer_validate(ctx: Context, msg: JettonInternalTransfer)</code>:",id:"_internal_transfer_validatectx-context-msg-jettoninternaltransfer",level:4},{value:"<code>_internal_transfer_estimate_remain_value(ctx: Context, msg: JettonInternalTransfer)</code>:",id:"_internal_transfer_estimate_remain_valuectx-context-msg-jettoninternaltransfer",level:4},{value:"<code>_internal_transfer_notification(ctx: Context, msg: JettonInternalTransfer)</code>:",id:"_internal_transfer_notificationctx-context-msg-jettoninternaltransfer",level:4},{value:"<code>_internal_transfer_excesses(ctx: Context, msg: JettonInternalTransfer, remain: Int)</code>:",id:"_internal_transfer_excessesctx-context-msg-jettoninternaltransfer-remain-int",level:4},{value:"<code>_burn_validate(ctx: Context, msg: JettonBurn)</code>:",id:"_burn_validatectx-context-msg-jettonburn",level:4},{value:"<code>_burn_tokens(ctx: Context, msg: JettonBurn)</code>:",id:"_burn_tokensctx-context-msg-jettonburn",level:4},{value:"<code>_transfer_validate(ctx: Context, msg: JettonTransfer)</code>:",id:"_transfer_validatectx-context-msg-jettontransfer",level:4},{value:"<code>_transfer_estimate_remain_value(ctx: Context, msg: JettonTransfer)</code>:",id:"_transfer_estimate_remain_valuectx-context-msg-jettontransfer",level:4},{value:"<code>_transfer_jetton(ctx: Context, msg: JettonTransfer)</code>:",id:"_transfer_jettonctx-context-msg-jettontransfer",level:4},{value:"How to Use",id:"how-to-use",level:2},{value:"Basic Usage",id:"basic-usage",level:3},{value:"Advanced Usage",id:"advanced-usage",level:3}],c={toc:d},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"jetton-wallet"},"Jetton Wallet"),(0,r.kt)("p",null,"This Jetton Wallet smart contract provides a framework for Jetton MastWalleter that comply with the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ton-blockchain/TEPs/blob/master/text/0074-jettons-standard.md"},"TEP-0074")," standard."),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"\u5728 TEP-0074 \u4e2d\u5b9a\u7fa9\u4e86 Jetton \u7684\u6a19\u6e96\uff0c\u5176\u4e2d\u6bcf\u7a2e Jetton \u90fd\u6709\u5c0d\u61c9\u7684 Jetton Wallet \u5408\u7d04\uff0c\u6bcf\u500b user \u5c0d\u4e0d\u540c\u7684 Jetton \u90fd\u6703\u6709\u4e00\u500b\u5c0d\u61c9\u7684 Jetton Wallet\uff0cJetton Wallet \u8ca0\u8cac\u5132\u5b58 Jetton \u7684\u6578\u91cf\uff0c\u4e26\u4e14\u63d0\u4f9b\u4e00\u4e9b\u57fa\u672c\u7684\u529f\u80fd\uff0c\u4f8b\u5982\u8f49\u5e33\u3001\u9444\u9020\u3001\u92b7\u6bc0\u7b49\u7b49\u3002"),(0,r.kt)("p",null,"\u5982\u679c\u9700\u8981\u62ff\u5230\u6574\u500b Jetton Wallet \u7684\u8cc7\u8a0a\uff0c\u53ef\u4ee5\u900f\u904e Jetton Wallet \u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"get_wallet_data()")," \u4f86\u53d6\u5f97\u3002"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"get_wallet_data()")," \u6703\u56de\u50b3\u4e00\u500b ",(0,r.kt)("inlineCode",{parentName:"p"},"WalletData"),"\uff0c\u88e1\u9762\u5305\u542b\u4e86 Jetton Wallet \u7684\u57fa\u672c\u8cc7\u8a0a\uff0c\u5927\u81f4\u4e0a\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"struct WalletData {\n    balance: Int as coins;      // amount of jettons on wallet\n    owner: Address;             // address of wallet owner;\n    jetton: Address;            // address of Jetton master-address\n    jetton_wallet_code: Cell;   // with code of this wallet\n}\n\n// @dev  get_wallet_data will return wallet data, which follows TEP 0074 standard\nget fun get_wallet_data(): WalletData{\n    return WalletData {\n        balance: self.balance,\n        owner: self.owner,\n        jetton: self.jetton_master,\n        jetton_wallet_code: self.calculate_jetton_wallet_init(self.owner).code\n    };\n}\n")),(0,r.kt)("h2",{id:"our-trait"},"Our Trait"),(0,r.kt)("h3",{id:"message-types"},"Message Types"),(0,r.kt)("p",null,"\u91dd\u5c0d Jetton Wallet\uff0c\u6211\u5011\u4f9d\u7167 TEP-0074 \u5be6\u4f5c\u4e86\u6578\u500b Message Type\uff0c\u7528\u65bc\u8f49\u5e33\u3001\u92b7\u6bc0 Jetton\u3001\u767c\u9001\u901a\u77e5\u3002"),(0,r.kt)("h4",{id:"jettontransfer"},(0,r.kt)("inlineCode",{parentName:"h4"},"JettonTransfer"),":"),(0,r.kt)("p",null,"\u60f3\u8981 Transfer Jetton \u6642\uff0c\u53ef\u4ee5\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"JettonTransfer"),"\uff0c\u50b3\u9001\u7d66 Jetton Wallet\uff0cJetton Wallet \u6703\u5c07 Jetton \u8f49\u79fb\u7d66 ",(0,r.kt)("inlineCode",{parentName:"p"},"destination")," \u64c1\u6709\u7684 Jetton Wallet\uff0c\u4e26\u4e14\u5c07\u5269\u9918\u7684 TON \u5e36\u56de ",(0,r.kt)("inlineCode",{parentName:"p"},"response_destination"),"\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"message(0x0f8a7ea5) JettonTransfer {\n    query_id: Int as uint64;                // arbitrary request number\n    amount: Int as coins;                   // amount of jettons to transfer\n    destination: Address;                   // address of the new owner of the jettons\n    response_destination: Address;          // address where to send a response with confirmation of a successful transfer and the rest of the incoming message Toncoins.\n    custom_payload: Cell?;                  // optional custom payload\n    forward_ton_amount: Int as coins;       // the amount of nanotons to be sent to the destination address.\n    forward_payload: Slice as remaining;    // optional custom data that should be sent to the destination address.\n}\n")),(0,r.kt)("h4",{id:"jettontransfernotification"},(0,r.kt)("inlineCode",{parentName:"h4"},"JettonTransferNotification"),":"),(0,r.kt)("p",null,"Jetton Wallet \u7684 Jetton \u8f49\u79fb\u7d66\u5176\u4ed6\u4eba\u5f8c\uff0c\u901a\u77e5 Jetton \u7684\u65b0 Owner\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"message(0x7362d09c) JettonTransferNotification {\n    query_id: Int as uint64;                // arbitrary request number\n    amount: Int as coins;                   // amount of jettons to transfer\n    sender: Address;                        // address of the sender of the jettons\n    forward_payload: Slice as remaining;    // optional custom payload\n}\n")),(0,r.kt)("h4",{id:"jettonburn"},(0,r.kt)("inlineCode",{parentName:"h4"},"JettonBurn"),":"),(0,r.kt)("p",null,"Jetton Wallet \u92b7\u6bc0\u81ea\u5df1\u5408\u7d04\u4e2d\u7684 Jetton\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"message(0x595f07bc) JettonBurn {\n    query_id: Int as uint64;        // arbitrary request number\n    amount: Int as coins;           // amount of jettons to burn\n    response_destination: Address;  // address where to send a response with confirmation of a successful burn and the rest of the incoming message coins.\n    custom_payload: Cell?;          // optional custom payload\n}\n")),(0,r.kt)("h4",{id:"jettonexcesses"},(0,r.kt)("inlineCode",{parentName:"h4"},"JettonExcesses"),":"),(0,r.kt)("p",null,"Jetton Wallet \u5c07 Jetton \u8f49\u79fb\u7d66\u5176\u4ed6\u4eba\u5f8c\uff0c\u5c07\u5269\u9918\u7684 TON \u5e36\u56de\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"message(0xd53276db) JettonExcesses {\n    query_id: Int as uint64;        // arbitrary request number\n}\n")),(0,r.kt)("h4",{id:"jettoninternaltransfer"},(0,r.kt)("inlineCode",{parentName:"h4"},"JettonInternalTransfer"),":"),(0,r.kt)("p",null,"Jetton Wallet \u8207\u5176\u4ed6 Jetton Wallet \u6216\u8207 Jetton Master \u4e4b\u9593\u7684\u8f49\u5e33\u3002\n\u7bc4\u4f8b\uff1a"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Jetton Wallet \u8207\u5176\u4ed6 Jetton Wallet \u4e4b\u9593\u7684\u8f49\u5e33\uff1aJetton Wallet \u50b3\u9001\u4e00\u500b ",(0,r.kt)("inlineCode",{parentName:"p"},"JettonInternalTransfer")," \u7d66 Jetton Wallet\uff0cJetton Wallet \u6703\u5c07 Jetton \u8f49\u79fb\u7d66 ",(0,r.kt)("inlineCode",{parentName:"p"},"destination")," \u64c1\u6709\u7684 Jetton Wallet\uff0c\u4e26\u4e14\u5c07\u5269\u9918\u7684 TON \u5e36\u56de ",(0,r.kt)("inlineCode",{parentName:"p"},"response_destination"),"\u3002")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Jetton Master \u8207 Jetton Wallet \u4e4b\u9593\u7684\u8f49\u5e33\uff1aJetton Master Mint Jetton \u7d66 Jetton Wallet \u6642\uff0c\u6703\u50b3\u9001\u4e00\u500b ",(0,r.kt)("inlineCode",{parentName:"p"},"JettonInternalTransfer")," \u7d66 Jetton Wallet\u3002"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"message(0x178d4519) JettonInternalTransfer {\n    query_id: Int as uint64;                // arbitrary request number\n    amount: Int as coins;                   // amount of jettons to transfer\n    response_address: Address;              // address where to send a response with confirmation of a successful transfer and the rest of the incoming message coins.\n    from: Address;                          // address of the sender of the jettons\n    forward_ton_amount: Int as coins;       // the amount of nanotons to be sent to the destination address.\n    forward_payload: Slice as remaining;    // optional custom data that should be sent to the destination address.\n}\n")),(0,r.kt)("h4",{id:"jettonburnnotification"},(0,r.kt)("inlineCode",{parentName:"h4"},"JettonBurnNotification"),":"),(0,r.kt)("p",null,"Jetton Wallet \u92b7\u6bc0 Jetton \u5f8c\uff0c\u767c\u51fa\u901a\u77e5\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"message(0x7bdd97de) JettonBurnNotification {\n    query_id: Int as uint64;          // arbitrary request number\n    amount: Int as coins;             // amount of jettons to burn\n    sender: Address;                  // address of the sender of the jettons\n    response_destination: Address;    // address where to send a response with confirmation of a successful burn and the rest of the incoming message coins.\n}\n")),(0,r.kt)("h3",{id:"must-override-functions"},"Must Override Functions"),(0,r.kt)("p",null,"Jetton Wallet \u5b9a\u7fa9\u4e86\u4e00\u500b\u5fc5\u9808\u5728\u5b50\u5408\u7d04\u4e2d\u5be6\u4f5c\u7684 function\uff1a"),(0,r.kt)("h4",{id:"calculate_jetton_wallet_initowner_address-address"},(0,r.kt)("inlineCode",{parentName:"h4"},"calculate_jetton_wallet_init(owner_address: Address)"),":"),(0,r.kt)("p",null,"\u5229\u7528 Jetton Wallet \u7684 ",(0,r.kt)("strong",{parentName:"p"},"owner address")," \u8a08\u7b97 Jetton Wallet \u7684 StateInit\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// @dev  calculate_jetton_wallet_init will get init code of a jetton wallet by provided it's owner address\n// @note one MUST override this function and return state init of the inherited jetton wallet implementation\nabstract inline fun calculate_jetton_wallet_init(owner_address: Address): StateInit;\n")),(0,r.kt)("h3",{id:"optional-override-functions"},"Optional Override Functions"),(0,r.kt)("p",null,"Jetton Wallet \u5b9a\u7fa9\u4e86\u4ee5\u4e0b\u5e7e\u500b Optional Override Functions\uff1a"),(0,r.kt)("h4",{id:"_internal_transfer_validatectx-context-msg-jettoninternaltransfer"},(0,r.kt)("inlineCode",{parentName:"h4"},"_internal_transfer_validate(ctx: Context, msg: JettonInternalTransfer)"),":"),(0,r.kt)("p",null,"\u7528\u65bc\u6aa2\u67e5 internal transfer message \u662f\u5426\u5408\u6cd5\uff0c\u4f8b\u5982\u6aa2\u67e5 sender \u662f\u5426\u70ba Jetton Master \u6216 Jetton Wallet\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// @dev  _internal_tranfer_validate will validate internal transfer message, usually it will check that sender is a jetton master or jetton wallet\n// @note this function will triggered on receiving JettonTransfer message\nvirtual inline fun _internal_transfer_validate(ctx: Context, msg: JettonInternalTransfer) {\n    if(ctx.sender != self.jetton_master){\n        let init: StateInit = self.calculate_jetton_wallet_init(msg.from);\n        require(ctx.sender == contractAddress(init), "JettonWallet: Only Jetton master or Jetton wallet can call this function");\n    }\n}\n')),(0,r.kt)("h4",{id:"_internal_transfer_estimate_remain_valuectx-context-msg-jettoninternaltransfer"},(0,r.kt)("inlineCode",{parentName:"h4"},"_internal_transfer_estimate_remain_value(ctx: Context, msg: JettonInternalTransfer)"),":"),(0,r.kt)("p",null,"\u4f30\u8a08\u8f49\u5e33\u5f8c\u5269\u9918\u7684 TON \u6578\u91cf\uff0c\u6703\u6263\u9664 storage fee\u3001forward fee \u4ee5\u53ca gas consumption\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// @dev  _internal_transfer_estimate_remain_value will estimate remain value after deducting storage fee, forward fee and gas consumption\nvirtual inline fun _internal_transfer_estimate_remain_value(ctx: Context, msg: JettonInternalTransfer): Int {\n    let tonBalanceBeforeMsg: Int = myBalance() - ctx.value;\n    let storage_fee: Int =  self.minTonsForStorage - min(tonBalanceBeforeMsg, self.minTonsForStorage);\n    let remain: Int = ctx.value - (storage_fee + self.gasConsumption);\n    if (msg.forward_ton_amount > 0) {\n        remain = remain - (ctx.readForwardFee() + msg.forward_ton_amount);\n    }\n    return remain;\n}\n")),(0,r.kt)("h4",{id:"_internal_transfer_notificationctx-context-msg-jettoninternaltransfer"},(0,r.kt)("inlineCode",{parentName:"h4"},"_internal_transfer_notification(ctx: Context, msg: JettonInternalTransfer)"),":"),(0,r.kt)("p",null,"\u8f49\u5e33\u5f8c\uff0c\u901a\u77e5 Jetton Wallet \u7684 Owner\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// @dev  _internal_transfer_notification will send notification to the owner of the jetton wallet\nvirtual inline fun _internal_transfer_notification(ctx: Context, msg: JettonInternalTransfer) {\n    if (msg.forward_ton_amount > 0) {\n        send(SendParameters{\n            to: self.owner,\n            value: msg.forward_ton_amount,\n            mode: SendPayGasSeparately,\n            bounce: false,\n            body: JettonTransferNotification{\n                query_id: msg.query_id,\n                amount: msg.amount,\n                sender: msg.from,\n                forward_payload: msg.forward_payload\n            }.toCell()\n        });\n    }\n}\n")),(0,r.kt)("h4",{id:"_internal_transfer_excessesctx-context-msg-jettoninternaltransfer-remain-int"},(0,r.kt)("inlineCode",{parentName:"h4"},"_internal_transfer_excesses(ctx: Context, msg: JettonInternalTransfer, remain: Int)"),":"),(0,r.kt)("p",null,"\u8f49\u5e33\u5f8c\uff0c\u5c07\u5269\u9918\u7684 TON \u9001\u56de\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// @dev  _internal_transfer_excesses will send excesses message back after transfer action completed\nvirtual inline fun _internal_transfer_excesses(ctx: Context, msg: JettonInternalTransfer, remain: Int){\n    if((msg.response_address != newAddress(0, 0)) && remain > 0){\n        send(SendParameters{\n            to: msg.response_address,\n            value: remain,\n            bounce: false,\n            mode: SendIgnoreErrors,\n            body: JettonExcesses{\n                query_id: msg.query_id\n            }.toCell()\n        });\n    }\n}\n")),(0,r.kt)("h4",{id:"_burn_validatectx-context-msg-jettonburn"},(0,r.kt)("inlineCode",{parentName:"h4"},"_burn_validate(ctx: Context, msg: JettonBurn)"),":"),(0,r.kt)("p",null,"\u6aa2\u67e5 burn request \u662f\u5426\u5408\u6cd5\uff0c\u4f8b\u5982\u6aa2\u67e5 burn request \u7684\u767c\u9001\u8005\u662f\u5426\u70ba Jetton Wallet \u7684 Owner\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// @dev  _burn_validate will conduct custom checking when receiving JettonBurn message\nvirtual inline fun _burn_validate(ctx: Context, msg: JettonBurn) {\n    require(ctx.sender == self.owner, "JettonWallet: Only owner can burn tokens");\n}\n')),(0,r.kt)("h4",{id:"_burn_tokensctx-context-msg-jettonburn"},(0,r.kt)("inlineCode",{parentName:"h4"},"_burn_tokens(ctx: Context, msg: JettonBurn)"),":"),(0,r.kt)("p",null,"\u92b7\u6bc0 Jetton\uff0c\u4e26\u4e14\u901a\u77e5 Jetton Master\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// @dev  _burn_tokens will burn tokens and send JettonBurnNotification back to the jetton master\n// @note this message is bounceable, if burn action failed, the message will be bounced back, you should increase the balance of the wallet\nvirtual inline fun _burn_tokens(ctx: Context, msg: JettonBurn) {\n    send(SendParameters{\n        to: self.jetton_master,\n        value: 0,\n        mode: SendRemainingValue,\n        bounce: true,\n        body: JettonBurnNotification{\n            query_id: msg.query_id,\n            amount: msg.amount,\n            sender: self.owner,\n            response_destination: msg.response_destination\n        }.toCell()\n    });\n}\n")),(0,r.kt)("h4",{id:"_transfer_validatectx-context-msg-jettontransfer"},(0,r.kt)("inlineCode",{parentName:"h4"},"_transfer_validate(ctx: Context, msg: JettonTransfer)"),":"),(0,r.kt)("p",null,"\u6aa2\u67e5 transfer request \u662f\u5426\u5408\u6cd5\uff0c\u4f8b\u5982\u6aa2\u67e5 transfer request \u7684\u767c\u9001\u8005\u662f\u5426\u70ba Jetton Wallet \u7684 Owner\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// @dev  _transfer_validate will conduct custom checking when receiving JettonTransfer message\nvirtual inline fun _transfer_validate(ctx: Context, msg: JettonTransfer) {\n    require(ctx.sender == self.owner, "Only owner can call this function");\n\n}\n')),(0,r.kt)("h4",{id:"_transfer_estimate_remain_valuectx-context-msg-jettontransfer"},(0,r.kt)("inlineCode",{parentName:"h4"},"_transfer_estimate_remain_value(ctx: Context, msg: JettonTransfer)"),":"),(0,r.kt)("p",null,"\u4f30\u8a08\u8f49\u5e33\u5f8c\u5269\u9918\u7684 TON \u6578\u91cf\uff0c\u6703\u6263\u9664 storage fee\u3001forward fee \u4ee5\u53ca gas consumption\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// @dev  _transfer_estimate_remain_value will estimate remain value after deducting storage fee, forward fee and gas consumption\nvirtual inline fun _transfer_estimate_remain_value(ctx: Context, msg: JettonTransfer) {\n    let fwd_count: Int = 1;\n    if (msg.forward_ton_amount > 0) {\n        fwd_count = 2;\n    }\n    require(ctx.value > fwd_count * ctx.readForwardFee() + 2 * self.gasConsumption + self.minTonsForStorage, "Not enough funds to transfer");\n}\n')),(0,r.kt)("h4",{id:"_transfer_jettonctx-context-msg-jettontransfer"},(0,r.kt)("inlineCode",{parentName:"h4"},"_transfer_jetton(ctx: Context, msg: JettonTransfer)"),":"),(0,r.kt)("p",null,"\u8f49\u5e33 Jetton\uff0c\u5982\u679c\u5c0d\u65b9\u9084\u6c92\u6709 Jetton Wallet\uff0c\u6703\u5148\u5e6b\u5c0d\u65b9\u5efa\u7acb Jetton Wallet\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// @dev  _transfer_jetton will transfer jettons to the jetton wallet of the destination address (owner of jetton wallet)\n// @note  this message is bounceable, if transfer action failed, the message will be bounced back, you should increase the balance of the wallet\nvirtual inline fun _transfer_jetton(ctx: Context, msg: JettonTransfer) {\n    let init: StateInit = self.calculate_jetton_wallet_init(msg.destination);\n    let receiver: Address = contractAddress(init);\n    send(SendParameters{\n        to: receiver,\n        value: 0,\n        bounce: true,\n        mode: SendRemainingValue,\n        body: JettonInternalTransfer{\n            query_id: msg.query_id,\n            amount: msg.amount,\n            response_address: msg.response_destination,\n            from: self.owner,\n            forward_ton_amount: msg.forward_ton_amount,\n            forward_payload: msg.forward_payload\n        }.toCell(),\n        code: init.code,\n        data: init.data\n    });\n}\n")),(0,r.kt)("h2",{id:"how-to-use"},"How to Use"),(0,r.kt)("h3",{id:"basic-usage"},"Basic Usage"),(0,r.kt)("p",null,"\u8981\u4f7f\u7528\u6211\u5011\u7684 Jetton Wallet Trait\uff0c\u9996\u5148\u9700\u8981\u5148\u5be6\u4f5c\u4e00\u500b Jetton Wallet \u4ee5\u53ca\u4e00\u500b ",(0,r.kt)("a",{parentName:"p",href:"JettonMaster"},"Jetton Master")," \u5408\u7d04\uff0c\u4e26\u4e14\u5be6\u4f5c ",(0,r.kt)("inlineCode",{parentName:"p"},"calculate_jetton_wallet_init(owner_address: Address)")," \u7b49\u7b49 must override function \u4ee5\u53ca init function\uff0c\u4f8b\u5982\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import "@stdlib/deploy";\nimport "./packages/token/jetton/JettonMaster";\nimport "./packages/token/jetton/JettonWallet";\n\ncontract ExampleJettonWallet with JettonWallet {\n    balance: Int as coins = 0;\n    owner: Address;\n    jetton_master: Address;\n\n    init(owner: Address, jetton_master: Address) {\n        self.owner = owner;\n        self.jetton_master = jetton_master;\n    }\n\n    override inline fun calculate_jetton_wallet_init(owner_address: Address): StateInit {\n        return initOf ExampleJettonWallet(owner_address, self.jetton_master);\n    }\n}\n\ncontract ExampleJettonMaster with JettonMaster, Deployable {\n    total_supply: Int as coins = 0;\n    mintable: Bool = true;\n    owner: Address;\n    jetton_content: Cell;\n\n    init(owner: Address, jetton_content: Cell){\n        self.owner = owner;\n        self.jetton_content = jetton_content;\n    }\n    override inline fun calculate_jetton_wallet_init(owner_address: Address): StateInit {\n        return initOf ExampleJettonWallet(owner_address, myAddress());\n    }\n}\n')),(0,r.kt)("h3",{id:"advanced-usage"},"Advanced Usage"),(0,r.kt)("p",null,"\u5982\u679c\u9700\u8981\u5be6\u4f5c\u4e00\u500b\u81ea\u5df1\u7684 Jetton Wallet\uff0c\u53ef\u4ee5 Override Jetton Wallet \u7684 Optional Override Functions\uff0c\u4f8b\u5982\u60f3\u8981\u8b93\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u92b7\u6bc0\u81ea\u5df1 Jetton Wallet \u4e2d\u7684 Jetton\uff0c\u53ef\u4ee5\u5be6\u4f5c ",(0,r.kt)("inlineCode",{parentName:"p"},"_burn_validate"),"\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'override inline fun _burn_validate(ctx: Context, msg: JettonBurn) {\n    require(ctx.sender != newAddress(0, 0), "Null address can not burn tokens");\n}\n')))}m.isMDXComponent=!0}}]);