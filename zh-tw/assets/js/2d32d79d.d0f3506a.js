"use strict";(self.webpackChunkdocs_contracts=self.webpackChunkdocs_contracts||[]).push([[8],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),d=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(o.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=d(n),p=r,f=m["".concat(o,".").concat(p)]||m[p]||u[p]||s;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=p;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[m]="string"==typeof e?e:r,i[1]=l;for(var d=2;d<s;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2376:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const s={sidebar_position:2},i="NFT Item",l={unversionedId:"nft/NFTItem",id:"nft/NFTItem",title:"NFT Item",description:"This file provides traits for NFT items compliant with the TEP-0062 standard.",source:"@site/i18n/zh-tw/docusaurus-plugin-content-docs/current/nft/NFTItem.mdx",sourceDirName:"nft",slug:"/nft/NFTItem",permalink:"/docs.contracts/zh-tw/docs/nft/NFTItem",draft:!1,editUrl:"https://github.com/Ton-Dynasty/tondynasty-contracts/pulls/docs/nft/NFTItem.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"NFT Collection",permalink:"/docs.contracts/zh-tw/docs/nft/NFTCollection"},next:{title:"NFT Auction",permalink:"/docs.contracts/zh-tw/docs/nft/markdown-features"}},o={},d=[{value:"Messages",id:"messages",level:2},{value:"Transfer",id:"transfer",level:3},{value:"OwnershipAssigned",id:"ownershipassigned",level:3},{value:"Excesses",id:"excesses",level:3},{value:"GetStaticData",id:"getstaticdata",level:3},{value:"ReportStaticData",id:"reportstaticdata",level:3},{value:"NftData Structure",id:"nftdata-structure",level:2},{value:"NFTItemStandard Trait",id:"nftitemstandard-trait",level:2},{value:"Messages Handling\u3001Internal Functions and Get Methods",id:"messages-handlinginternal-functions-and-get-methods",level:2},{value:"Messages Handling",id:"messages-handling",level:3},{value:"<code>receive(msg: Transfer)</code>",id:"receivemsg-transfer",level:4},{value:"<code>receive(msg: GetStaticData)</code>",id:"receivemsg-getstaticdata",level:4},{value:"Internal Functions",id:"internal-functions",level:3},{value:"<code>_transfer_estimate_rest_value(ctx: Context): Int</code>",id:"_transfer_estimate_rest_valuectx-context-int",level:4},{value:"<code>_transfer_validate(ctx: Context, msg: Transfer, remain: Int)</code>",id:"_transfer_validatectx-context-msg-transfer-remain-int",level:4},{value:"<code>mint(ctx: Context, msg: Transfer)</code>",id:"mintctx-context-msg-transfer",level:4},{value:"<code>transfer(ctx: Context, msg: Transfer, remain: Int)</code>",id:"transferctx-context-msg-transfer-remain-int",level:4},{value:"<code>_report_static_data(msg: GetStaticData)</code>",id:"_report_static_datamsg-getstaticdata",level:4},{value:"<code>_get_nft_data(): NftData</code>",id:"_get_nft_data-nftdata",level:4},{value:"Get Methods",id:"get-methods",level:3},{value:"<code>get_nft_data(): NftData</code>",id:"get_nft_data-nftdata",level:4}],c={toc:d},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"nft-item"},"NFT Item"),(0,r.kt)("p",null,"This file provides traits for NFT items compliant with the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ton-blockchain/TEPs/blob/master/text/0062-nft-standard.md"},"TEP-0062 standard"),"."),(0,r.kt)("p",null,"Reference:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/ton-blockchain/token-contract/blob/991bdb4925653c51b0b53ab212c53143f71f5476/nft/nft-item.fc#L17"},"Official Implementation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/howardpen9/nft-template-in-tact/blob/tutorial/sources/contract.tact"},"NFT Template"))),(0,r.kt)("h2",{id:"messages"},"Messages"),(0,r.kt)("h3",{id:"transfer"},"Transfer"),(0,r.kt)("p",null,"\u767c\u8d77 NFT Item \u7684\u4ea4\u6613\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"message(0x5fcc3d14) Transfer {\n    query_id: Int as uint64;\n    new_owner: Address;\n    response_destination: Address;\n    custom_payload: Cell?;\n    forward_amount: Int as coins;\n    forward_payload: Slice as remaining;\n}\n")),(0,r.kt)("h3",{id:"ownershipassigned"},"OwnershipAssigned"),(0,r.kt)("p",null,"\u901a\u77e5 NFT Item \u7684\u6240\u6709\u8005\u8b8a\u66f4\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"message(0x05138d91) OwnershipAssigned {\n    query_id: Int as uint64;\n    prev_owner: Address;\n    forward_payload: Slice as remaining;\n}\n")),(0,r.kt)("h3",{id:"excesses"},"Excesses"),(0,r.kt)("p",null,"\u8ca0\u8cac\u8655\u7406\u4ea4\u6613\u4e2d\u7684\u591a\u9918 TON\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"message(0xd53276db) Excesses {\n    query_id: Int as uint64;\n}\n")),(0,r.kt)("h3",{id:"getstaticdata"},"GetStaticData"),(0,r.kt)("p",null,"\u53d6\u5f97 NFT Item \u7684\u975c\u614b data\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"message(0x2fcb26a2) GetStaticData {\n    query_id: Int as uint64;\n}\n")),(0,r.kt)("h3",{id:"reportstaticdata"},"ReportStaticData"),(0,r.kt)("p",null,"\u56de\u5831 NFT Item \u7684\u975c\u614b data\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"message(0x8b771735) ReportStaticData {\n    query_id: Int as uint64;\n    index: Int as uint256;\n    collection: Address;\n}\n")),(0,r.kt)("h2",{id:"nftdata-structure"},"NftData Structure"),(0,r.kt)("p",null,"\u63cf\u8ff0 NFT \u7684 data \u7d50\u69cb\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"struct NftData {\n    is_initialized: Bool;\n    index: Int;\n    collection_address: Address;\n    owner_address: Address;\n    individual_content: Cell;\n}\n")),(0,r.kt)("h2",{id:"nftitemstandard-trait"},"NFTItemStandard Trait"),(0,r.kt)("p",null,"\u5be6\u4f5c NFT Item \u7684\u6a19\u6e96\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'contract ExampleNFTItem with NFTItemStandard {\n    override const gasConsumption: Int = ton("0.03");\n\n    collection_address: Address;\n    index: Int;\n    owner: Address;\n    individual_content: Cell;\n    is_initialized: Bool = false;\n\n    init(collection_address: Address, index: Int, owner: Address, individual_content: Cell) {\n        self.collection_address = collection_address;\n        self.index = index;\n        self.owner = owner;\n        self.individual_content = individual_content;\n    }\n}\n')),(0,r.kt)("h2",{id:"messages-handlinginternal-functions-and-get-methods"},"Messages Handling\u3001Internal Functions and Get Methods"),(0,r.kt)("h3",{id:"messages-handling"},"Messages Handling"),(0,r.kt)("h4",{id:"receivemsg-transfer"},(0,r.kt)("inlineCode",{parentName:"h4"},"receive(msg: Transfer)")),(0,r.kt)("p",null,"\u8655\u7406\u4ea4\u6613\u8a0a\u606f\uff0c\u767c\u8d77 NFT Item \u9444\u9020\u6216\u8f49\u79fb NFT Item\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"receive(msg: Transfer){\n    let ctx: Context = context();\n    let remain: Int = self._transfer_estimate_rest_value(ctx);\n    self._transfer_validate(ctx, msg, remain);\n    if (self.is_initialized == false) {\n        self.mint(ctx, msg);\n    } else {\n        self.transfer(ctx, msg, remain);\n    }\n}\n")),(0,r.kt)("h4",{id:"receivemsg-getstaticdata"},(0,r.kt)("inlineCode",{parentName:"h4"},"receive(msg: GetStaticData)")),(0,r.kt)("p",null,"\u8655\u7406\u975c\u614b data \u7684\u8acb\u6c42\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"receive(msg: GetStaticData){\n    self._report_static_data(msg);\n}\n")),(0,r.kt)("h3",{id:"internal-functions"},"Internal Functions"),(0,r.kt)("h4",{id:"_transfer_estimate_rest_valuectx-context-int"},(0,r.kt)("inlineCode",{parentName:"h4"},"_transfer_estimate_rest_value(ctx: Context): Int")),(0,r.kt)("p",null,"\u8a08\u7b97\u5269\u9918\u7684 TON\uff0c\u9700\u8981\u8fd4\u56de\u7d66\u524d\u4e00\u500b\u6240\u6709\u8005\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// @dev  _transfer_estimate_rest_value calculates the remain amount of nanotons that should be sent back to the old owner\ninline fun _transfer_estimate_rest_value(ctx: Context): Int {\n    let remain: Int = ctx.value;\n    let tonBalanceBeforeMsg: Int = myBalance() - remain;\n    let storageFee: Int = self.minTonsForStorage - min(tonBalanceBeforeMsg, self.minTonsForStorage);\n    return remain - (storageFee + self.gasConsumption);\n}\n")),(0,r.kt)("h4",{id:"_transfer_validatectx-context-msg-transfer-remain-int"},(0,r.kt)("inlineCode",{parentName:"h4"},"_transfer_validate(ctx: Context, msg: Transfer, remain: Int)")),(0,r.kt)("p",null,"\u9a57\u8b49\u4ea4\u6613\u8acb\u6c42\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// @dev  _transfer_validate checks if the request is valid (e.g. the sender is the current owner of the NFT item)\n//       throws error if the request is invalid\n// @note one may override this function to implement custom validation logicTransferked\nvirtual inline fun _transfer_validate(ctx: Context, msg: Transfer, remain: Int) {\n    require(ctx.sender == self.owner || ctx.sender == self.collection_address, "NFTItemStandard: Only the owner or collection can transfer the NFT item");\n}\n')),(0,r.kt)("h4",{id:"mintctx-context-msg-transfer"},(0,r.kt)("inlineCode",{parentName:"h4"},"mint(ctx: Context, msg: Transfer)")),(0,r.kt)("p",null,"\u8655\u7406 NFT Item \u7684\u9444\u9020\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// @dev  mint usually performs the minting of the NFT item\n// @note one may override this function to implement custom minting logic\nvirtual inline fun mint(ctx: Context, msg: Transfer) {\n    require(ctx.sender == self.collection_address, "NFTItemStandard: Only the collection can initialize the NFT item");\n    self.is_initialized = true;\n    self.owner = msg.new_owner;\n    send(SendParameters{\n        to: msg.response_destination,\n        value: 0,\n        mode:  SendIgnoreErrors + SendRemainingValue,\n        body: Excesses { query_id: msg.query_id }.toCell()\n    });\n}\n')),(0,r.kt)("h4",{id:"transferctx-context-msg-transfer-remain-int"},(0,r.kt)("inlineCode",{parentName:"h4"},"transfer(ctx: Context, msg: Transfer, remain: Int)")),(0,r.kt)("p",null,"\u57f7\u884c NFT Item \u7684\u8f49\u79fb\uff0c\u4e26\u767c\u9001\u76f8\u95dc\u7684\u901a\u77e5\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// @dev  transfer performs the transfer of the NFT item\n//      if available, it will send OwnershipAssigned message to the new owner\n//      then, it will send Excesses message to the response_destination (old owner) if needed.\n// @note one may override this function to implement custom transfer logic\nvirtual inline fun transfer(ctx: Context, msg: Transfer, remain: Int) {\n    self.owner = msg.new_owner;\n    if (msg.forward_amount > 0) {\n        send(SendParameters{\n            to: msg.new_owner,\n            value: msg.forward_amount,\n            mode: SendIgnoreErrors,\n            bounce: false,\n            body: OwnershipAssigned{\n                query_id: msg.query_id,\n                prev_owner: ctx.sender,\n                forward_payload: msg.forward_payload\n            }.toCell()\n        });\n    }\n    remain = remain - ctx.readForwardFee();\n    if (msg.response_destination != newAddress(0, 0) && remain > msg.forward_amount) {\n        send(SendParameters{\n            to: msg.response_destination,\n            value: remain - msg.forward_amount,\n            mode: SendPayGasSeparately,\n            body: Excesses { query_id: msg.query_id }.toCell()\n        });\n    }\n}\n")),(0,r.kt)("h4",{id:"_report_static_datamsg-getstaticdata"},(0,r.kt)("inlineCode",{parentName:"h4"},"_report_static_data(msg: GetStaticData)")),(0,r.kt)("p",null,"\u56de\u5831 NFT Item \u7684\u975c\u614b data\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// @dev  _report_static_data sends a response with the static data of the NFT item\nvirtual inline fun _report_static_data(msg: GetStaticData) {\n    let ctx: Context = context();\n    send(SendParameters {\n        to: ctx.sender,\n        value: 0,\n        mode: SendRemainingValue,\n        bounce: false,\n        body: ReportStaticData{\n            query_id: msg.query_id,\n            index: self.index,\n            collection: self.collection_address\n        }.toCell()\n    });\n}\n")),(0,r.kt)("h4",{id:"_get_nft_data-nftdata"},(0,r.kt)("inlineCode",{parentName:"h4"},"_get_nft_data(): NftData")),(0,r.kt)("p",null,"\u53d6\u5f97\u7b26\u5408 TEP-64 \u7684 NFT data\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// @dev  _get_nft_data returns the NFT data in the format that complies with TEP-64\nvirtual inline fun _get_nft_data(): NftData {\n    let builder: StringBuilder = beginString();\n    let collectionData: String = self.individual_content.asSlice().asString();\n    builder.append(collectionData);\n    builder.append(self.index.toString());\n    builder.append(".json");\n\n    return NftData {\n        is_initialized: self.is_initialized,\n        index: self.index,\n        collection_address: self.collection_address,\n        owner_address: self.owner,\n        individual_content: builder.toCell()\n    };\n}\n')),(0,r.kt)("h3",{id:"get-methods"},"Get Methods"),(0,r.kt)("h4",{id:"get_nft_data-nftdata"},(0,r.kt)("inlineCode",{parentName:"h4"},"get_nft_data(): NftData")),(0,r.kt)("p",null,"\u53d6\u5f97 NFT data\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"get fun get_nft_data(): NftData {\n    return self._get_nft_data();\n}\n")))}u.isMDXComponent=!0}}]);