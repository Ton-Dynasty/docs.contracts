"use strict";(self.webpackChunkdocs_contracts=self.webpackChunkdocs_contracts||[]).push([[809],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=i.createContext({}),d=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=d(e.components);return i.createElement(l.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=d(t),p=a,m=u["".concat(l,".").concat(p)]||u[p]||f[p]||r;return t?i.createElement(m,s(s({ref:n},c),{},{components:t})):i.createElement(m,s({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,s=new Array(r);s[0]=p;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[u]="string"==typeof e?e:a,s[1]=o;for(var d=2;d<r;d++)s[d]=t[d];return i.createElement.apply(null,s)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8565:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>f,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var i=t(7462),a=(t(7294),t(3905));const r={sidebar_position:3},s="NFT Auction",o={unversionedId:"nft/markdown-features",id:"nft/markdown-features",title:"NFT Auction",description:"\u5be6\u4f5c\u57fa\u790e TON NFT \u62cd\u8ce3\u529f\u80fd",source:"@site/i18n/zh-tw/docusaurus-plugin-content-docs/current/nft/markdown-features.mdx",sourceDirName:"nft",slug:"/nft/markdown-features",permalink:"/docs.contracts/zh-tw/docs/nft/markdown-features",draft:!1,editUrl:"https://github.com/Ton-Dynasty/tondynasty-contracts/pulls/docs/nft/markdown-features.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"NFT Item",permalink:"/docs.contracts/zh-tw/docs/nft/NFTItem"}},l={},d=[{value:"Architecture",id:"architecture",level:2},{value:"How does the Auction functionality work?",id:"how-does-the-auction-functionality-work",level:2},{value:"NFT sellers can perform the following actions to sell or auction their NFTs:",id:"nft-sellers-can-perform-the-following-actions-to-sell-or-auction-their-nfts",level:2},{value:"Create an auction for a single NFT and customize its auction by specifying the following:",id:"create-an-auction-for-a-single-nft-and-customize-its-auction-by-specifying-the-following",level:3},{value:"Bidders can perform the following actions using the Auction contract:",id:"bidders-can-perform-the-following-actions-using-the-auction-contract",level:2},{value:"Customize the auction for a single NFT by specifying the following:",id:"customize-the-auction-for-a-single-nft-by-specifying-the-following",level:3},{value:"Purchase an NFT by specifying the following during the sale:",id:"purchase-an-nft-by-specifying-the-following-during-the-sale",level:3},{value:"Addtional functions avaliable",id:"addtional-functions-avaliable",level:2},{value:"Let&#39;s TON it up!!!",id:"lets-ton-it-up",level:2},{value:"With NFTAuctionMarketStandard",id:"with-nftauctionmarketstandard",level:3},{value:"Seller needs to first transfer NFT to Auction Market",id:"seller-needs-to-first-transfer-nft-to-auction-market",level:3},{value:"After the Auction Market successfully establishes a dedicated NFT Auction Contract",id:"after-the-auction-market-successfully-establishes-a-dedicated-nft-auction-contract",level:3},{value:"Settling the NFT Auction",id:"settling-the-nft-auction",level:3},{value:'<a id="auction-example-code"></a>Auction Example Code',id:"auction-example-code",level:2},{value:"Addtional Functions",id:"addtional-functions",level:2},{value:"Revise SetUp Auction",id:"revise-setup-auction",level:3},{value:"EndAuction",id:"endauction",level:3},{value:"NFT Auction Market Contract Internal Functions and Get Methods",id:"nft-auction-market-contract-internal-functions-and-get-methods",level:3},{value:"NFT Auction Contract Internal Functions and Get Methods",id:"nft-auction-contract-internal-functions-and-get-methods",level:3}],c={toc:d},u="wrapper";function f(e){let{components:n,...r}=e;return(0,a.kt)(u,(0,i.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"nft-auction"},"NFT Auction"),(0,a.kt)("p",null,"\u5be6\u4f5c\u57fa\u790e TON NFT \u62cd\u8ce3\u529f\u80fd"),(0,a.kt)("h2",{id:"architecture"},"Architecture"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Architecture",src:t(7004).Z,width:"3869",height:"3536"}),"\n\u900f\u904eTON\u5b50\u6bcd\u5408\u7d04\u7684\u512a\u52e2\uff0cNFT\u6301\u6709\u8005\u5411",(0,a.kt)("strong",{parentName:"p"},"NFT Auction Market Contract"),"\u5efa\u7acb\u5c08\u5c6c\u7684",(0,a.kt)("strong",{parentName:"p"},"NFT Auction Contract"),"\u9032\u884c\u62cd\u8ce3\u3002"),(0,a.kt)("h2",{id:"how-does-the-auction-functionality-work"},"How does the Auction functionality work?"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u9019\u500b\u667a\u80fd\u5408\u7d04 interface \u53ef\u4ee5\u5728\u53bb\u4e2d\u5fc3\u5316\u4e14\u9748\u6d3b\u7684\u60c5\u6cc1\u4e0b\u7528\u65bc NFT \u7684\u62cd\u8ce3\uff08\u6216\u50c5\u8cfc\u8cb7/\u51fa\u552e\uff09\u3002"),(0,a.kt)("li",{parentName:"ul"},"\u8ce3\u5bb6\u548c\u7af6\u6a19\u8005\u80fd\u5920\u5275\u5efa\u81ea\u5b9a\u7fa9\u7684\u62cd\u8ce3\u548c\u51fa\u50f9\uff0c\u5f9e\u800c\u5be6\u73fe\u5168\u9762\u7684 NFT \u62cd\u8ce3/\u92b7\u552e\u6a5f\u5236\u3002")),(0,a.kt)("h2",{id:"nft-sellers-can-perform-the-following-actions-to-sell-or-auction-their-nfts"},"NFT sellers can perform the following actions to sell or auction their NFTs:"),(0,a.kt)("h3",{id:"create-an-auction-for-a-single-nft-and-customize-its-auction-by-specifying-the-following"},"Create an auction for a single NFT and customize its auction by specifying the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"NFTAddress"),": \u62cd\u8ce3\u7684 NFT \u7684\u5730\u5740\u3002"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"reservePrice"),": \u7576\u9054\u5230\u6b64\u50f9\u683c\u6642\uff0c\u62cd\u8ce3\u958b\u59cb\uff0c\u7528\u6236\u6709\u4e00\u6bb5\u7279\u5b9a\u7684\u6642\u9593\u4f86\u9032\u884c\u5f8c\u7e8c\u7684\u66f4\u9ad8\u51fa\u50f9\u3002\u5982\u679c\u4e5f\u8a2d\u7f6e\u4e86 ",(0,a.kt)("inlineCode",{parentName:"li"},"buyNowPrice"),"\uff0c\u5247\u6700\u4f4e\u50f9\u683c\u4e0d\u80fd\u5927\u65bc ",(0,a.kt)("inlineCode",{parentName:"li"},"buyNowPrice"),"\u3002"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"buyNowPrice"),": \u7576\u8cb7\u5bb6\u9054\u5230\u6b64\u50f9\u683c\u6642\uff0c\u5c07\u81ea\u52d5\u7d50\u675f\u62cd\u8ce3\u3002"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"auctionEnd"),": \u6b64\u7af6\u6a19 NFT \u62cd\u8ce3\u7684\u671f\u9650\u3002"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"defaultAuctionBidPeriod"),": \u6307\u5b9a\u62cd\u8ce3\u5728\u9054\u5230\u6700\u4f4e\u50f9\u683c\u5f8c\u5c07\u6301\u7e8c\u7684\u6642\u9593\u3002\u6bcf\u6b21\u9054\u5230\u66f4\u9ad8\u7684\u51fa\u50f9\u5f8c\uff0c\u62cd\u8ce3\u5c07\u518d\u6b21\u6301\u7e8c\u9019\u6bb5\u6642\u9593\u3002\u4f8b\u5982\uff0c\u5982\u679c\u62cd\u8ce3\u6295\u6a19\u671f\u9650\u8a2d\u7f6e\u70ba x\uff0c\u4e26\u4e14\u6700\u4f4e\u50f9\u683c\u5728\u6642\u9593 T0 \u9054\u5230\uff0c\u5247\u62cd\u8ce3\u5c07\u5728\u6642\u9593 T0+x \u7d50\u675f\u3002\u4f46\u662f\uff0c\u5982\u679c\u5728\u6642\u9593 T1\uff08\u5176\u4e2d T0 < T1 < T0+x\uff09\u7531\u53e6\u4e00\u540d\u7af6\u6a19\u8005\u51fa\u50f9\u66f4\u9ad8\uff0c\u5247\u62cd\u8ce3\u7d50\u675f\u6642\u9593\u5c07\u66f4\u65b0\u70ba\u6642\u9593 T1 +x\u3002"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"defaultBidIncreasePercentage"),": \u5b83\u78ba\u5b9a\u7af6\u6a19\u8005\u5fc5\u9808\u5b58\u5165\u7684\u91d1\u984d\uff0c\u4ee5\u6210\u70ba\u6700\u9ad8\u7af6\u6a19\u8005\u3002\u56e0\u6b64\uff0c\u5982\u679c\u51fa\u50f9 X \u91d1\u984d\uff0c\u5247\u4e0b\u4e00\u540d\u7af6\u6a19\u8005\u5fc5\u9808\u51fa\u50f9 X + ((X ","*"," \u51fa\u50f9\u589e\u52a0\u767e\u5206\u6bd4)/10000)\u3002"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"beneficiary"),": \u7576\u62cd\u8ce3\u7d50\u675f\u6642\uff0c\u5c07\u6536\u5230\u62cd\u8ce3\u7684\u552e\u50f9\u767c\u9001\u7684\u6307\u5b9a\u7684 ",(0,a.kt)("inlineCode",{parentName:"li"},"Address\u3002"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"message SetUpAuction {\n    nftAddress: Address;            // NFT address to be auctioned\n    reservePrice: Int as coins;     // minimum bid price to start the auction timer\n    buyNowPrice: Int as coins;      // price at which the NFT can be directly bought\n    auctionPeriod: Int as uint256;  // time when the auction ends after it starts\n    beneficiary: Address?;           // the address of the beneficiary\n}\n")),(0,a.kt)("h2",{id:"bidders-can-perform-the-following-actions-using-the-auction-contract"},"Bidders can perform the following actions using the Auction contract:"),(0,a.kt)("h3",{id:"customize-the-auction-for-a-single-nft-by-specifying-the-following"},"Customize the auction for a single NFT by specifying the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bidVale"),": \u5982\u679c\u5df2\u7d93\u6709\u4eba\u51fa\u50f9\uff0c\u7af6\u6a19\u8005\u5fc5\u9808\u51fa\u66f4\u9ad8\u7684\u51fa\u50f9\u589e\u52a0\u767e\u5206\u6bd4\u91d1\u984d\u3002\u4f46\u5982\u679c\u9019\u5df2\u7d93\u6eff\u8db3\uff0c\u7af6\u6a19\u8005\u7121\u9700\u51fa\u66f4\u9ad8\u65bc\u8ce3\u5bb6\u8a2d\u5b9a\u7684\u6700\u4f4e\u50f9\u683c\u7684\u51fa\u50f9\uff08\u5728\u9019\u7a2e\u60c5\u6cc1\u4e0b\uff0c\u62cd\u8ce3\u4e0d\u6703\u958b\u59cb\uff09\u3002\u56e0\u6b64\uff0c\u5982\u679c\u5728\u62cd\u8ce3\u4e0a\u6c92\u6709\u51fa\u50f9\uff0c\u7af6\u6a19\u8005\u53ef\u4ee5\u6307\u5b9a\u4efb\u4f55\u91d1\u984d\u3002"),(0,a.kt)("li",{parentName:"ul"},"\u7528\u6236\u9084\u53ef\u4ee5\u9032\u884c\u81ea\u5b9a\u7fa9\u51fa\u50f9\uff0c\u4e26\u6307\u5b9a NFT \u63a5\u6536\u8005\uff0c\u5982\u679c\u4ed6\u5011\u7684\u51fa\u50f9\u6210\u529f\uff0c\u5247 NFT \u5c07\u8f49\u79fb\u7d66\u8a72\u63a5\u6536\u8005\u3002")),(0,a.kt)("h3",{id:"purchase-an-nft-by-specifying-the-following-during-the-sale"},"Purchase an NFT by specifying the following during the sale:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5728\u9019\u7a2e\u60c5\u6cc1\u4e0b\uff0c\u8cfc\u8cb7\u8005\u53ef\u4ee5\u4ee5\u4f4e\u65bc\u7acb\u5373\u8cfc\u8cb7\u50f9\u683c\u7684\u91d1\u984d\u9032\u884c\u51fa\u50f9\uff0c\u9019\u4e0d\u6703\u7d50\u675f\u92b7\u552e\u3002\u7136\u5f8c\uff0c\u8cfc\u8cb7\u8005\u5fc5\u9808\u4ee5\u6bd4\u4e4b\u524d\u7684\u4f4e\u51fa\u50f9\u91d1\u984d\u9ad8\u7684\u9ed8\u8a8d\u767e\u5206\u6bd4\u91d1\u984d\u9032\u884c\u51fa\u50f9\u3002\u5982\u679c\u7af6\u6a19\u8005\u6307\u5b9a\u7684\u91d1\u984d\u7b49\u65bc\u6216\u9ad8\u65bc\u7acb\u5373\u8cfc\u8cb7\u50f9\u683c\uff0c\u5247\u92b7\u552e\u5c07\u7d50\u675f\uff0c\u4e26\u4e14 NFT \u548c\u8cfc\u8cb7\u91d1\u984d\u5c07\u88ab\u8f49\u79fb\u3002")),(0,a.kt)("h2",{id:"addtional-functions-avaliable"},"Addtional functions avaliable"),(0,a.kt)("p",null,"Sellers can"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5982\u679c\u62cd\u8ce3\u7684\u6700\u4f4e\u50f9\u683c\u5c1a\u672a\u9054\u5230\uff0c\u6216\u8005\u5728\u51fa\u552e\u6642\u96a8\u6642\u63d0\u53d6\u4ed6\u5011\u7684\u62cd\u8ce3\u3002"),(0,a.kt)("li",{parentName:"ul"},"\u66f4\u65b0\u62cd\u8ce3\u7684\u6700\u4f4e\u50f9\u683c\u3002\u53ea\u6709\u5728\u5df2\u7d93\u6c92\u6709\u51fa\u50f9\u8d85\u904e\u539f\u59cb\u6700\u4f4e\u50f9\u683c\u7684\u60c5\u6cc1\u4e0b\uff0c\u624d\u80fd\u9032\u884c\u6b64\u64cd\u4f5c\u3002"),(0,a.kt)("li",{parentName:"ul"},"\u66f4\u65b0\u62cd\u8ce3\u6216\u92b7\u552e\u7684\u7acb\u5373\u8cfc\u8cb7\u50f9\u683c\u3002\u5982\u679c\u5728\u62cd\u8ce3\u6216\u92b7\u552e\u4e0a\u5df2\u7d93\u9032\u884c\u4e86\u51fa\u50f9\uff0c\u4e26\u4e14\u6b64\u66f4\u65b0\u5c07\u610f\u5473\u8457\u6b64\u51fa\u50f9\u73fe\u5728\u6eff\u8db3\u7acb\u5373\u8cfc\u8cb7\u50f9\u683c\uff0c\u5247\u5c07\u7d50\u675f\u62cd\u8ce3\u6216\u92b7\u552e\uff0c\u4e26\u76f8\u61c9\u5206\u914d NFT \u548c\u51fa\u50f9\u91d1\u984d\u3002"),(0,a.kt)("li",{parentName:"ul"},"\u63a5\u53d7\u6700\u9ad8\u51fa\u50f9\u91d1\u984d\u4e26\u7d50\u675f\u62cd\u8ce3\u6216\u92b7\u552e\u3002")),(0,a.kt)("p",null,"Bidders can"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5728\u62cd\u8ce3\u6295\u6a19\u671f\u9650\u5df2\u904e\uff08\u6700\u4f4e\u51fa\u50f9\u5df2\u9054\u5230\uff09\u7684\u60c5\u6cc1\u4e0b\uff0c\u4efb\u4f55\u7528\u6236\u90fd\u53ef\u4ee5\u7d50\u7b97\u62cd\u8ce3\u4e26\u5c07\u51fa\u50f9\u548c NFT \u5206\u767c\u7d66\u76f8\u61c9\u7684\u8ce3\u5bb6\u548c\u63a5\u6536\u8005\u3002"),(0,a.kt)("li",{parentName:"ul"},"\u7576\u6295\u6a19\u8005\u7684 ",(0,a.kt)("inlineCode",{parentName:"li"},"bidVale"),"\uff0c\u88ab\u65b0\u7684\u6295\u6a19\u8005\u7684 ",(0,a.kt)("inlineCode",{parentName:"li"},"bidVale")," \u8d85\u904e\u6642\uff0c\u6703\u5c07\u524d\u4e00\u7b46\u7af6\u50f9\u7684 ",(0,a.kt)("inlineCode",{parentName:"li"},"bidVale")," \u9084\u7d66\u6295\u6a19\u8005\uff0c\u4e26\u66f4\u65b0\u65b0\u7684\u6700\u9ad8\u7af6\u6a19\u50f9\u683c\u4ee5\u53ca\u7af6\u50f9\u8005\u3002"),(0,a.kt)("li",{parentName:"ul"},"NFT\u7684Seller\u4e0d\u80fd\u5c0d\u81ea\u5df1\u7684NFT\u62cd\u8ce3\u7af6\u6a19\u3002")),(0,a.kt)("h2",{id:"lets-ton-it-up"},"Let's TON it up!!!"),(0,a.kt)("h3",{id:"with-nftauctionmarketstandard"},"With NFTAuctionMarketStandard"),(0,a.kt)("p",null,"Github Repo: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Ton-Dynasty/tondynasty-contracts"},"https://github.com/Ton-Dynasty/tondynasty-contracts")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"trait NFTAuctionMarketStandard {\n    owner: Address;\n    // Check whether nft is transfered to NFT Auction Market Contract\n    auctionTransferCheck: map<Int, Int>; // key => hash(sellerAddress and nftAddress), vlaue => 1: set, 0: not set\n    // Check whether nft auction is over or not\n    auctionOverCheck: map<Address, Address>;  // key => nft auction contract address, value => 1: not over, 0: over\n\n    // @dev Default parameters for setting up an NFT auction\n    virtual const defaultBidIncreasePercentage: Int = 100;\n    virtual const defaultAuctionBidPeriod: Int = 86400; // 1 day\n    virtual const minimumSettableIncreasePercentage: Int = 100;\n    virtual const maximumMinPricePercentage: Int = 8000;\n}\n")),(0,a.kt)("p",null,"\u900f\u904e\u7e7c\u627f ",(0,a.kt)("inlineCode",{parentName:"p"},"NFTAuctionMarketStandard")," \u5feb\u901f\u5be6\u4f5c\u5c6c\u65bc\u81ea\u5df1\u7684 Auction Contract\uff0c\u53ef\u4ee5\u81ea\u884c\u6539\u5beb\u9810\u8a2d\u57fa\u672c\u7af6\u50f9\u8b8a\u6578\u3002"),(0,a.kt)("h3",{id:"seller-needs-to-first-transfer-nft-to-auction-market"},"Seller needs to first transfer NFT to Auction Market"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// @dev Processes the OwnershipAssigned message and updates auction mappings,\n//      and confirms NFT transfer to the Auction Market.\nreceive(msg: OwnershipAssigned) {\n    let ctx: Context = context();\n    let prev_owner: Address = msg.prev_owner; // Seller Address\n    let nftAddress: Address = ctx.sender;\n    let hashSellerNftAddress: Int = self.get_hash_seller_nft_address(prev_owner, nftAddress);\n    // Set nft transfer checking to 1\n    self.auctionTransferCheck.set(hashSellerNftAddress, 1);\n    let payload: Slice = msg.forward_payload;\n\n    if(payload.empty() == false) {\n        self._parse_forward_payload(prev_owner, nftAddress, payload);\n    }\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Seller \u5411 NFT Item \u767c\u9001 ",(0,a.kt)("inlineCode",{parentName:"li"},"Transfer")," message\uff0c\u7576 NFT Owner \u66f4\u6539\u6210 Auction Market \u5f8c\uff0cNFT Item \u6703\u767c\u9001 ",(0,a.kt)("inlineCode",{parentName:"li"},"OwnershipAssigned")," message \u5230 Auction Market Cotnract\uff0c\n\u7576 Auction Contract \u6536\u5230\u8a0a\u606f\u5f8c\uff0c\u6703\u7d00\u9304\u8f49\u79fb\u6210\u529f\u3002"),(0,a.kt)("li",{parentName:"ul"},"Seller \u53ef\u4ee5\u5229\u7528 ",(0,a.kt)("inlineCode",{parentName:"li"},"OwnershipAssigned")," mesage \u7684 ",(0,a.kt)("inlineCode",{parentName:"li"},"custome_payload")," \u586b\u5beb ",(0,a.kt)("inlineCode",{parentName:"li"},"SetUpAuction")," \u7684\u57fa\u672c\u51fd\u6578\uff0c\u82e5\u6709\u586b\u5beb ",(0,a.kt)("inlineCode",{parentName:"li"},"custome_payload\uff0c\u5247\u6703\u540c\u6642\u66ff")," Seller Deploy NFT Auction Contract\u3002"),(0,a.kt)("li",{parentName:"ul"},"\u82e5 ",(0,a.kt)("inlineCode",{parentName:"li"},"custome_payload")," \u4e26\u672a\u586b\u5beb\uff0c\u5247\u53ef\u4ee5\u518d\u6b21\u5411 NFT Auction Market contract \u50b3\u9001 ",(0,a.kt)("inlineCode",{parentName:"li"},"SetUpAuction")," mesage\uff0c\u4e26 Deploy NFT Auction Contract\u3002")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// @dev Handles the receipt of a SetUpAuction message.\n//      First, it verifies if the NFT has been transferred to the NFT Auction Market Contract.\n//      Upon successful validation, it sets up the auction for the specified NFT and deploys\n//      a new NFT Auction Contract instance for it.\nreceive(msg: SetUpAuction) {\n    let ctx: Context = context();\n    let sellerAddress: Address = ctx.sender;\n    let hashSellerNftAddress: Int = self.get_hash_seller_nft_address(sellerAddress, msg.nftAddress);\n    self._auction_transfer_validate(hashSellerNftAddress);\n    if(msg.beneficiary == null) {\n        msg.beneficiary = sellerAddress;\n    }\n    // Set up auction info\n    let auctionInfo: AuctionInfo = self._set_up_auction(sellerAddress, msg.nftAddress, msg.reservePrice, msg.N, msg.auctionPeriod, msg.beneficiary!!); // set up auction\n    self._set_price_validate(msg.buyNowPrice, msg.reservePrice);\n    let nftAuctionInit: StateInit = self._nft_auction_init(msg.nftAddress, sellerAddress);\n    let nftAuctionAddress: Address = self.get_nft_auction_address(msg.nftAddress, sellerAddress);\n    self._auction_set_validate(nftAuctionAddress);\n    self.auctionOverCheck.set(nftAuctionAddress, msg.nftAddress);\n\n    // Deploy a new NFT Auction Contract\n    self._build_auction(nftAuctionAddress, auctionInfo, nftAuctionInit);\n}\n")),(0,a.kt)("h3",{id:"after-the-auction-market-successfully-establishes-a-dedicated-nft-auction-contract"},"After the Auction Market successfully establishes a dedicated NFT Auction Contract"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u7af6\u6a19\u8005\u53ef\u4ee5\u5411 NFT Auction Contract\uff0c\u767c\u9001 ",(0,a.kt)("inlineCode",{parentName:"li"},"Bid")," message\uff0c\u5411\u6b64 NFT \u7af6\u6a19\uff0c",(0,a.kt)("inlineCode",{parentName:"li"},"message.value")," \u5373\u662f\u6295\u6a19\u50f9\u683c\u3002"),(0,a.kt)("li",{parentName:"ul"},"Auction Market \u6536\u5230 ",(0,a.kt)("inlineCode",{parentName:"li"},"Bid")," \u8a0a\u606f\u5f8c\uff0c\u6703\u5148\u6aa2\u67e5 this auction is still active or not.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// Check if auction is still active.\nrequire(now() < self.auctionEndTime || self.auctionEndTime == 0, "Auction ended");\nrequire(self.isInitialized == 1, "Contract is not initialized");\nrequire((now() < self.auctionBidPeriod) |(self.auctionBidPeriod == 0), "Auction bid period ended");\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u6aa2\u67e5",(0,a.kt)("inlineCode",{parentName:"li"},"bidValue"),"\u662f\u5426\u8d85\u904e",(0,a.kt)("inlineCode",{parentName:"li"},"buyNowPrice"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"let bidValue: Int = ctx.value;\nlet buyNowPrice: Int = self.auctionInfo.buyNowPrice;\nif(bidValue >= buyNowPrice) {\n    self.auctionInfo.nftHighestBid = bidValue;\n    // Pay winning bid amount to seller.\n    self._send_winning_bid_amount();\n    // Transfer NFT to buyer\n    self._transfer_nft(buyer);\n    self.isInitialized = 0;\n    return;\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u82e5\u6c92\u6709\u8d85\u904e\u76f4\u8cfc\u50f9\uff0c\u5247\u6703\u6aa2\u67e5\u662f\u5426\u6709\u8d85\u904e\u76ee\u524d\u6700\u9ad8\u7af6\u6a19\u50f9\u7684\u6700\u4f4e\u52a0\u50f9\u6bd4\u4f8b")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'let bidIncreaseAmount: Int = (self.auctionInfo.nftHighestBid * (10000 + self.auctionInfo.bidIncreasePercentage)) / 10000;\nrequire(bidValue > bidIncreaseAmount, "Bid doesn\'t meet the minimum increase requirement");\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u82e5\u6709\u8d85\u904e\u52a0\u50f9\u6bd4\u4f8b\uff0c\u5247\u6703\u5c07Previos Highest Bid Value\u9001\u9084\u7d66Previos Highest Bidder\u3002")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// Send back previous highest bid to previous highest bidder.\nlet prevNftHighestBidder: Address = self.auctionInfo.nftHighestBidder;\nlet prevNftHighestBid: Int = self.auctionInfo.nftHighestBid;\nlet paybackTon: Int = max(prevNftHighestBid - self.minTonsForStorage - self.gasConsumption,0);\nsend(SendParameters{\n    to: prevNftHighestBidder,\n    value: paybackTon, \n    mode: SendPayGasSeparately, \n    bounce: false,\n    body: "Pay bid money back to the prevNftHighestBidder".asComment()\n});\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Update Highest Bid\u3001Bidder\u4ee5\u53caAuction Bid Period")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// Update highest bid and Transfer ton back to previous highest bidder.\nself.auctionInfo.nftHighestBidder = ctx.sender;\nself.auctionInfo.nftHighestBid = bidValue;\n// If bid value is greater than reserve price, then the auction is being started.\nif(bidValue > self.auctionInfo.reservePrice) {\n    self._update_auction_bid_period();\n    if(self.auctionEndTime == 0) { \n        // If the auction start, then set the auction end time.\n        self._update_auction_end_time();\n    }\n}\n")),(0,a.kt)("h3",{id:"settling-the-nft-auction"},"Settling the NFT Auction"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u7576Auction Bid Period\u7d50\u675f\u90fd\u6c92\u4eba\u63d0\u51fa\u66f4\u9ad8\u7684\u7af6\u50f9\uff0c\u5247\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u5411Autction contract\u767c\u9001\u7d50\u7b97\u7684Message\u3002"),(0,a.kt)("li",{parentName:"ul"},"\u82e5Auction\u5df2\u7d93\u958b\u59cb(\u7af6\u50f9\u5df2\u7d93\u8d85\u904e",(0,a.kt)("inlineCode",{parentName:"li"},"reservePrice"),")\uff0cAuction\u7d50\u675f\u5f8c\uff0c\u6703\u5c07",(0,a.kt)("inlineCode",{parentName:"li"},"BidValue"),"\u50b3\u9001\u7d66Seller\uff0c\u4e26\u8f49\u79fbNFT\u7d66Bidder\u3002"),(0,a.kt)("li",{parentName:"ul"},"\u82e5Auction\u5c1a\u672a\u958b\u59cb\uff0c\u5247\u6703\u5c07NFT\u8f49\u9084\u7d66Seller\u3002")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// @dev Ends the auction and transfers the NFT to the highest bidder or back to the seller(If autcion not started)\nreceive("EndAuction") {\n    // If this auction started, it will transfer NFT to highest bidder.\n    // Else, it will transfer NFT to seller.\n    if(self.auctionEndTime > 0) {\n        // Pay royalty to the creator of the NFT\n        // TODO: Implement royalty payment\n        \n        // Pay winning bid amount to seller.\n        self._send_winning_bid_amount();\n        // Transfer NFT to buyer\n        let buyer: Address = self.auctionInfo.nftHighestBidder;\n        self._transfer_nft(buyer);\n        self.isInitialized = 0;\n    }\n    else {\n        // Transfer NFT to seller\n        let seller: Address = self.auctionInfo.nftSeller;\n        self._transfer_nft(seller);\n        self.isInitialized = 0;\n    }\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5c07NFT\u8f49\u79fb\u7d66\u65b0Owner"),(0,a.kt)("li",{parentName:"ul"},"\u767c\u9001",(0,a.kt)("inlineCode",{parentName:"li"},"TransferNFT")," Message\u7d66NFT Auction Contract\uff0c\u518d\u5c07NFT\u8f49\u79fb\u7d66\u65b0Owner")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// @dev Transfer the NFT to the highest bidder\n// @note If you want change msg value, you should make sure that is enough for NFT Auction market contract to transfer NFT.\nvirtual inline fun _transfer_nft(buyer: Address) {\n    send(SendParameters{\n        to: self.owner, \n        value: ton("0.06"), \n        bounce: true,\n        mode: SendPayGasSeparately,\n        body: TransferNFT {\n            nftAddress: self.nftAddress,\n            seller: self.auctionInfo.nftSeller,\n            query_id: 0,\n            new_owner: buyer,\n            response_destination: buyer,\n            custom_payload: emptyCell(),\n            forward_amount: 0,\n            forward_payload: emptySlice()\n        }.toCell()\n    });\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"NFT Auction Contract\u6536\u5230\u8f49\u79fbNFT\u7684\u8a0a\u606f\u5f8c\uff0c\u5c0dNFT Item\u767c\u9001",(0,a.kt)("inlineCode",{parentName:"li"},"Transfer")," message\u66f4\u63dbOwner")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// @dev Handles the TransferNFT message and facilitates NFT transfer to the auction's winning bidder.\nreceive(msg: TransferNFT) {\n    let ctx: Context = context();\n    let nftAuctionAddress: Address = ctx.sender;\n    self._auction_not_set_validate(nftAuctionAddress);\n    send(SendParameters{\n        to: msg.nftAddress, \n        value: 0, \n        bounce: false,\n        mode: SendRemainingValue,\n        body: Transfer {\n            query_id: msg.query_id,\n            new_owner: msg.new_owner,\n            response_destination: msg.response_destination,\n            custom_payload: msg.custom_payload,\n            forward_amount: msg.forward_amount,\n            forward_payload: msg.forward_payload\n        }.toCell()\n    });\n    self.auctionOverCheck.set(ctx.sender, null);\n    let hashSellerNftAddress: Int = self.get_hash_seller_nft_address(msg.seller, msg.nftAddress);\n    self.auctionTransferCheck.set(hashSellerNftAddress, null);\n}\n")),(0,a.kt)("h2",{id:"auction-example-code"},(0,a.kt)("a",{id:"auction-example-code"}),"Auction Example Code"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"NFT Auction Market Trait Link: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/Ton-Dynasty/tondynasty-contracts/blob/main/contracts/packages/token/nft/NFTAuctionMarket.tact"},"https://github.com/Ton-Dynasty/tondynasty-contracts/blob/main/contracts/packages/token/nft/NFTAuctionMarket.tact")),(0,a.kt)("li",{parentName:"ul"},"NFT Auction Trait Link: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/Ton-Dynasty/tondynasty-contracts/blob/main/contracts/packages/token/nft/NFTAuction.tact"},"https://github.com/Ton-Dynasty/tondynasty-contracts/blob/main/contracts/packages/token/nft/NFTAuction.tact"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import "@stdlib/deploy";\nimport "./packages/token/nft/NFTAuctionMarket";\nimport "./packages/token/nft/NFTAuction";\ncontract ExampleNFTAuctionMarket with Deployable, NFTAuctionMarketStandard {\n    owner: Address;\n    // Get auction info by seller address and nft address.\n    nftContractAuctions: map<Int, AuctionInfo>; // key => hash(sellerAddress and nftAddress), value => AuctionInfo\n    // Check whether nft is transfered to NFT Auction Market Contract\n    auctionTransferCheck: map<Int, Int>; // key => hash(sellerAddress and nftAddress), vlaue => 1: set, 0: not set\n    // Get auction info by nft collection address and nft id.\n    collectionNftIdToAuction: map<Int, Int>; // key => hash(nft collection address and nft id), value => hash(sellerAddress and nftAddress)\n    // Check whether nft auction is over or not\n    auctionOverCheck: map<Address, Address>;  // key => nft auction contract address, value => 1: not over, 0: over\n    init(owner: Address) {\n        self.owner = owner;\n    }\n\n    // @dev Retrieves the initial state for the NFT auction contract.\n    override get fun _nft_auction_init(nftAddress: Address, seller: Address): StateInit {\n        return initOf ExampleNFTAuction(myAddress(), nftAddress, seller);\n    }\n}\n\ncontract ExampleNFTAuction with NFTAuctionStandard {\n    owner: Address;\n    nftAddress: Address;\n    seller: Address;\n    auctionInfo: AuctionInfo;\n    auctionBidPeriod: Int;\n    isInitialized: Int;\n    auctionEndTime: Int;\n\n    init(owner: Address, nftAddress: Address, seller: Address) {\n        self.owner = owner;\n        self.nftAddress = nftAddress;\n        self.seller = seller;\n        self.auctionBidPeriod = 0;\n        self.auctionEndTime = 0;\n        self.isInitialized = 0;\n        self.auctionInfo = AuctionInfo {\n            bidIncreasePercentage: 0,\n            auctionBidPeriod: 0,\n            auctionPeriod: 0,\n            reservePrice: 0,\n            buyNowPrice: 0,\n            nftHighestBid: 0,\n            nftHighestBidder: newAddress(0, 0),\n            nftSeller: seller,\n            whitelistedBuyer: seller,\n            nftRecipient: seller,\n            beneficiary: seller\n        };\n    }\n}\n\n')),(0,a.kt)("h2",{id:"addtional-functions"},"Addtional Functions"),(0,a.kt)("h3",{id:"revise-setup-auction"},"Revise SetUp Auction"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u7576\u62cd\u8ce3\u9084\u672a\u958b\u59cb\u6642\uff0cSeller\u53ef\u4ee5\u66f4\u6539",(0,a.kt)("inlineCode",{parentName:"li"},"reserve_price"),"\u4ee5\u53ca",(0,a.kt)("inlineCode",{parentName:"li"},"buyNowPrice")),(0,a.kt)("li",{parentName:"ul"},"\u5411NFT Autcion Market\u767c\u9001",(0,a.kt)("inlineCode",{parentName:"li"},"ReviseSetUpAuction")," message")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// @dev Updates auction details after verifying NFT transfer and previous auction setup, then communicates the update to the nftAuctionAddress.\nreceive(msg: ReviseSetUpAuction) {\n    let ctx: Context = context();\n    let sellerAddress: Address = ctx.sender;\n    let hashSellerNftAddress: Int = self.get_hash_seller_nft_address(sellerAddress, msg.nftAddress);\n    self._auction_transfer_validate(hashSellerNftAddress);\n    // Get nft auction address\n    let nftAuctionAddress: Address = self.get_nft_auction_address(msg.nftAddress, sellerAddress);\n    self._auction_not_set_validate(nftAuctionAddress);\n    if(msg.beneficiary == null) {\n        msg.beneficiary = sellerAddress;\n    }\n    // Set up auction info\n    let auctionInfo: AuctionInfo = self._set_up_auction(sellerAddress, msg.nftAddress, msg.reservePrice, msg.buyNowPrice, msg.auctionPeriod, msg.beneficiary!!); // set up auction\n    self.auctionOverCheck.set(nftAuctionAddress, msg.nftAddress);\n    let newAuctionInfo: AuctionInfo = self._set_up_auction(sellerAddress, msg.nftAddress, msg.reservePrice, msg.buyNowPrice, msg.auctionPeriod, msg.beneficiary!!); // set up auction\n    send(SendParameters{\n            to: nftAuctionAddress,\n            value: 0,\n            mode: SendRemainingValue,\n            bounce: false,\n            body: ReviseAuction {\n                reviseAuctionInfo: newAuctionInfo\n            }.toCell()\n        }\n    );\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"NFT Auction Market\u6703\u5411NFT Auction Contract\u767c\u9001\u66f4\u6539\u8a0a\u606f")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// @dev Allows owner to adjust auction\'s reserve or buy-now prices.\nreceive(msg: ReviseAuction) {\n    let ctx: Context = context();\n    require(ctx.sender == self.owner, "Only owner can revise auction contract");\n    require(self.auctionInfo.reservePrice == msg.reviseAuctionInfo.reservePrice || msg.reviseAuctionInfo.buyNowPrice == self.auctionInfo.buyNowPrice, "Cannot update reserve price and buy now price at the same time.");\n\n    // Update the reserve price of the auction.\n    // This can only be done if no bid has been made that already exceeds the original minimum price.\n    if(self.auctionEndTime == 0 && self.auctionInfo.reservePrice != msg.reviseAuctionInfo.reservePrice && msg.reviseAuctionInfo.reservePrice < self.auctionInfo.buyNowPrice) {\n\n        self.auctionInfo.reservePrice = msg.reviseAuctionInfo.reservePrice;\n        if(self.auctionInfo.nftHighestBid > self.auctionInfo.reservePrice) {\n            self._update_auction_bid_period();\n            self._update_auction_end_time();\n        }\n    }\n    // Update the buy now price of the auction.\n    // This can only be done if no bid has been made that already exceeds the original minimum price.\n    if(self.auctionEndTime == 0 && msg.reviseAuctionInfo.buyNowPrice != self.auctionInfo.buyNowPrice && msg.reviseAuctionInfo.buyNowPrice > self.auctionInfo.reservePrice) {\n        self.auctionInfo.buyNowPrice = msg.reviseAuctionInfo.buyNowPrice;\n    }\n}\n')),(0,a.kt)("h3",{id:"endauction"},"EndAuction"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u82e5Seller\u60f3\u8981\u63d0\u524d\u7d42\u6b62\u62cd\u8ce3\uff0c\u5247\u53ef\u4ee5\u5411NFT Auction Market\u50b3\u9001",(0,a.kt)("inlineCode",{parentName:"li"},"EndAuction")," message")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// @dev Allows the seller to terminate an auction. \n//      It verifies if the auction was previously set and then sends a message to the nftAuctionAddress to conclude the auction.\n//      It will transfer the NFT to the highest bidder or back to the seller(If autcion not started).\nreceive(msg: EndAuction) {\n    // Seller can end auction.\n    let ctx: Context = context();\n    let sellerAddress: Address = ctx.sender;\n    let hashSellerNftAddress: Int = self.get_hash_seller_nft_address(sellerAddress, msg.nftAddress);\n    let nftAuctionAddress: Address = self.get_nft_auction_address(msg.nftAddress, sellerAddress);\n    self._auction_not_set_validate(nftAuctionAddress);\n    send(SendParameters{\n            to: nftAuctionAddress,\n            value: 0,\n            mode: SendRemainingValue,\n            bounce: false,\n            body: "EndAuction".asComment()\n        }\n    );\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u82e5\u62cd\u8ce3\u5df2\u7d93\u958b\u59cb\uff0c\u5247\u99ac\u4e0a\u7d50\u6a19\u50b3\u9001\u7d66\u76ee\u524d\u7684Highest Bidder\uff0c\u4e26\u628a",(0,a.kt)("inlineCode",{parentName:"li"},"BidValue"),"\u50b3\u9001\u7d66Seller"),(0,a.kt)("li",{parentName:"ul"},"\u82e5\u62cd\u8ce3\u5c1a\u672a\u958b\u59cb\uff0c\u5247\u5c07NFT\u8f49\u63db\u7d66Seller")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// @dev Ends the auction and transfers the NFT to the highest bidder or back to the seller(If autcion not started)\n    receive("EndAuction") {\n        // If this auction started, it will transfer NFT to highest bidder.\n        // Else, it will transfer NFT to seller.\n        if(self.auctionEndTime > 0) {\n            // Pay royalty to the creator of the NFT\n            // TODO: Implement royalty payment\n            \n            // Pay winning bid amount to seller.\n            self._send_winning_bid_amount();\n            // Transfer NFT to buyer\n            let buyer: Address = self.auctionInfo.nftHighestBidder;\n            self._transfer_nft(buyer);\n            self.isInitialized = 0;\n        }\n        else {\n            // Transfer NFT to seller\n            let seller: Address = self.auctionInfo.nftSeller;\n            self._transfer_nft(seller);\n            self.isInitialized = 0;\n        }\n    }\n')),(0,a.kt)("h3",{id:"nft-auction-market-contract-internal-functions-and-get-methods"},"NFT Auction Market Contract Internal Functions and Get Methods"),(0,a.kt)("p",null,"Internal Function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// @dev Parses payload to extract auction parameters and initializes the auction with provided data.\nvirtual inline fun _parse_forward_payload(seller: Address, nftAddress: Address, payload: Slice) {\n    // Parse payload\n    let beneficiary: Address = payload.loadAddress();\n    let reservePrice: Int = payload.loadCoins();\n    let buyNowPrice: Int = payload.loadCoins();\n    let auctionPeriod: Int = payload.loadUint(256);\n\n    // Set up auction info\n    let auctionInfo: AuctionInfo = self._set_up_auction(seller, nftAddress, reservePrice, buyNowPrice, auctionPeriod, beneficiary); // set up auction\n    self._set_price_validate(buyNowPrice, reservePrice);\n    let nftAuctionInit: StateInit = self._nft_auction_init(nftAddress, seller);\n    let nftAuctionAddress: Address = self.get_nft_auction_address(nftAddress, seller);\n    self._auction_set_validate(nftAuctionAddress);\n    self.auctionOverCheck.set(nftAuctionAddress, nftAddress);\n\n    // Deploy a new NFT Auction Contract\n    self._build_auction(nftAuctionAddress, auctionInfo, nftAuctionInit);\n}\n\n// @dev Create and configure a new NFT Auction Contract with the provided auction info.\nvirtual inline fun _build_auction(nftAuctionAddress: Address, auctionInfo: AuctionInfo, nftAuctionInit: StateInit) {\n    send(SendParameters{\n            to: nftAuctionAddress,\n            value: 0,\n            mode: SendRemainingValue,\n            bounce: false,\n            body: BuildNftAuction {\n                auctionInfo: auctionInfo\n            }.toCell(),\n            code: nftAuctionInit.code, \n            data: nftAuctionInit.data\n        }\n    );\n}\n\n// @dev Validates that the buyNowPrice is higher than the reservePrice.\nvirtual inline fun _set_price_validate(buyNowPrice: Int, reservePrice: Int) {\n    require(buyNowPrice > reservePrice, "BuyNowPrice must be greater than reservePrice.");\n}\n\n// @dev Checks if an auction has already been set for the provided NFT address.\nvirtual inline fun _auction_set_validate(nftAuctionAddress: Address) {\n    require(self.auctionOverCheck.get(nftAuctionAddress) == null, "Auction was already set for this NFT.");\n}\n\n// @dev Validates that an auction was previously set for the given NFT address.\nvirtual inline fun _auction_not_set_validate(nftAuctionAddress: Address) {\n    require(self.auctionOverCheck.get(nftAuctionAddress) != null, "Auction was not set before.");\n}\n\n// @dev Verifies that the NFT was transferred to the auction contract.\nvirtual inline fun _auction_transfer_validate(hashSellerNftAddress: Int) {\n    require(self.get_is_auction_transfer_check(hashSellerNftAddress) == 1, "This NFT didn\'t transfer to NFT Auction Market Contract yet.");\n}\n\n// @dev Initializes an auction for a specified NFT with given parameters such as reserve price, buy now price, and auction duration.\n// @note If you want to use custom auction parameters or logic, consider overriding this function and AuctionInfo struct in a derived contract.\nvirtual inline fun _set_up_auction(sellerAddress: Address, nftAddress: Address, reservePrice: Int, buyNowPrice: Int, auctionPeriod: Int, beneficiary: Address): AuctionInfo {\n    let hashSellerNftAddress: Int = self.get_hash_seller_nft_address(sellerAddress, nftAddress);\n    return AuctionInfo {\n        bidIncreasePercentage: self.defaultBidIncreasePercentage,\n        auctionBidPeriod: self.defaultAuctionBidPeriod,\n        auctionPeriod: auctionPeriod,\n        reservePrice: reservePrice,\n        buyNowPrice: buyNowPrice,\n        nftHighestBid: 0,\n        nftHighestBidder: sellerAddress,\n        nftSeller: sellerAddress,\n        whitelistedBuyer: sellerAddress,\n        nftRecipient: sellerAddress,\n        beneficiary: beneficiary\n    };\n}\n')),(0,a.kt)("p",null,"NFT Auction\u9700\u8981\u5728\u77e5\u9053NFT Auction\u7684Init\u9700\u8981\u586b\u5beb\u7684\u53c3\u6578\uff0c\u624d\u6709\u8fa6\u6cd5\u6539\u5beb\uff0c_nft_auction_init\u7684\u7bc4\u4f8b\u53ef\u4ee5\u5728",(0,a.kt)("a",{href:"#auction-example-code"},"Auction Example Code"),"\u67e5\u770b"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// @dev Retrieves the initial state for the NFT auction contract.\n// @note one MUST override this function to provide NFT Auction initCode\nabstract fun _nft_auction_init(nftAddress: Address, seller: Address): StateInit;\n")),(0,a.kt)("p",null,"Get Methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// @dev Determines the NFT auction contract address.\nget fun get_nft_auction_address(nftAddress: Address, seller: Address): Address {\n    let nftAuctionInit: StateInit = self._nft_auction_init(nftAddress, seller);\n    return contractAddress(nftAuctionInit);\n}\n\n// @dev Generates a hash value based on the seller and NFT address.\nget fun get_hash_seller_nft_address(seller: Address, nftAddress: Address): Int {\n    return beginCell().storeAddress(seller).storeAddress(nftAddress).endCell().asSlice().hash();\n}\n\n// @dev Checks if the auction transfer for a given hash is valid.\nget fun get_is_auction_transfer_check(hashSellerNftAddress: Int): Int {\n    if(self.auctionTransferCheck.get(hashSellerNftAddress) == null) {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}\n")),(0,a.kt)("h3",{id:"nft-auction-contract-internal-functions-and-get-methods"},"NFT Auction Contract Internal Functions and Get Methods"),(0,a.kt)("p",null,"Internal Function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'// @dev Updates the auction bid period time based on the latest bid and the defined auction bid period\nvirtual inline fun _update_auction_bid_period() {\n    self.auctionBidPeriod = now() + self.auctionInfo.auctionBidPeriod;\n}\n\n// @dev Updates the auction end time\nvirtual inline fun _update_auction_end_time() {\n    self.auctionEndTime = now() + self.auctionInfo.auctionPeriod;\n}\n\n// @dev Transfer the NFT to the highest bidder\n// @note If you want change msg value, you should make sure that is enough for NFT Auction market contract to transfer NFT.\nvirtual inline fun _transfer_nft(buyer: Address) {\n    send(SendParameters{\n        to: self.owner, \n        value: ton("0.06"), \n        bounce: true,\n        mode: SendPayGasSeparately,\n        body: TransferNFT {\n            nftAddress: self.nftAddress,\n            seller: self.auctionInfo.nftSeller,\n            query_id: 0,\n            new_owner: buyer,\n            response_destination: buyer,\n            custom_payload: emptyCell(),\n            forward_amount: 0,\n            forward_payload: emptySlice()\n        }.toCell()\n    });\n}\n\n// @dev Transfers the highest bid amount to the seller\nvirtual inline fun _send_winning_bid_amount() {\n    let seller: Address = self.auctionInfo.beneficiary;\n    let winningBidAmount: Int = self.auctionInfo.nftHighestBid;\n    send(SendParameters{\n        to: seller,\n        value: winningBidAmount - ton("0.06"), \n        mode: SendPayGasSeparately, \n        bounce: false,\n        body: "Pay winning bid amount".asComment()\n    });\n}\n\n// @dev Initializes the auction end time to 0, allowing the seller to auction the NFT again in the future\nvirtual inline fun _init_auction_end() {\n    let ctx: Context = context();\n    require(ctx.sender == self.owner, "Only owner can init auction end time.");\n    self.auctionBidPeriod = 0;\n}\n')),(0,a.kt)("p",null,"Get Methods"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// @dev Returns the current auction information\nget fun get_auctin_info(): AuctionInfo {\n    return self.auctionInfo;\n}\n\n// @dev Checks if the auction is initialized and returns the state (1 for initialized, 0 otherwise)\nget fun get_is__initialized(): Int {\n    return self.isInitialized;\n}\n\n// @dev Returns the end time of the auction\nget fun get_auction_end(): Int {\n    return self.auctionEndTime;\n}\n\n// @dev Retruns the auction bid period\nget fun get_auction_bid_period(): Int {\n    return self.auctionBidPeriod;\n}\n")))}f.isMDXComponent=!0},7004:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/ton_auction_flow-6192c4e2d5728a3e946c09e01eaca2fc.jpg"}}]);